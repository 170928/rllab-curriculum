#!/Users/dementrock/anaconda/envs/rllab3/bin/python
import json
import logging
import multiprocessing
import os
import re
import sys

import click
import subprocess

import redis
import boto3
from rllab import config
from rllab.misc.instrument import query_yes_no

DEBUG_LOGGING_MAP = {
    0: logging.CRITICAL,
    1: logging.WARNING,
    2: logging.INFO,
    3: logging.DEBUG
}


@click.group()
@click.option('--verbose', '-v',
              help="Sets the debug noise level, specify multiple times "
                   "for more verbosity.",
              type=click.IntRange(0, 3, clamp=True),
              count=True)
@click.pass_context
def cli(ctx, verbose):
    logger_handler = logging.StreamHandler(sys.stderr)
    logger_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
    logging.getLogger().addHandler(logger_handler)
    logging.getLogger().setLevel(DEBUG_LOGGING_MAP.get(verbose, logging.DEBUG))


REGIONS = ["ap-northeast-2", "us-east-2", "ap-south-1", "us-east-1", "us-west-1", "us-west-2"]#['us-east-1',
# 'us-west-1', 'us-west-2']


def get_clients():
    regions = REGIONS
    clients = []
    for region in regions:
        client = boto3.client(
            "ec2",
            region_name=region,
            aws_access_key_id=config.AWS_ACCESS_KEY,
            aws_secret_access_key=config.AWS_ACCESS_SECRET,
        )
        client.region = region
        clients.append(client)
    return clients


def _collect_instances(region):
    client = boto3.client(
        "ec2",
        region_name=region,
        aws_access_key_id=config.AWS_ACCESS_KEY,
        aws_secret_access_key=config.AWS_ACCESS_SECRET,
    )
    print("Collecting instances in region", region)
    instances = [x['Instances'][0] for x in client.describe_instances(
        Filters=[
            {
                'Name': 'instance.group-name',
                'Values': [
                    'rocky-rllab-sg'
                ]
            },
            {
                'Name': 'instance-state-name',
                'Values': [
                    'running'
                ]
            }
        ]
    )['Reservations']]
    for instance in instances:
        instance['Region'] = region
    return instances


def get_all_instances():
    # clients = get_clients()

    # all_instances = []

    with multiprocessing.Pool(10) as pool:
        all_instances = sum(pool.map(_collect_instances, REGIONS), [])
    #
    #
    #
    # for client in clients:
    #     print("Collecting instances in region", client.region)
    #     instances = [x['Instances'][0] for x in client.describe_instances(
    #         Filters=[
    #             {
    #                 'Name': 'instance.group-name',
    #                 'Values': [
    #                     'rllab-sg-rocky'
    #                 ]
    #             },
    #             {
    #                 'Name': 'instance-state-name',
    #                 'Values': [
    #                     'running'
    #                 ]
    #             }
    #         ]
    #     )['Reservations']]
    #     for instance in instances:
    #         instance['Region'] = client.region
    #     all_instances.extend(instances)

    return all_instances


def get_name_tag(instance):
    if 'Tags' in instance:
        try:
            tags = instance['Tags']
            name_tag = [t for t in tags if t['Key'] == 'Name'][0]
            return name_tag['Value']
        except IndexError:
            return None
    return None


def get_exp_prefix_tag(instance):
    if 'Tags' in instance:
        try:
            tags = instance['Tags']
            name_tag = [t for t in tags if t['Key'] == 'exp_prefix'][0]
            return name_tag['Value']
        except IndexError:
            return None
    return None


@cli.command()
def jobs():
    jobs = []
    for instance in get_all_instances():
        name = get_name_tag(instance)
        if name is not None:
            jobs.append(name)

    for job in sorted(jobs):
        print(job)


@cli.command()
@click.argument('job')
def ssh(job):
    for instance in get_all_instances():
        name = get_name_tag(instance)
        if name == job:
            ip_addr = instance['PublicIpAddress']
            exp_prefix = get_exp_prefix_tag(instance)

            command = " ".join([
                "ssh",
                "-oStrictHostKeyChecking=no",
                "-oConnectTimeout=10",
                "-t",
                "ubuntu@" + ip_addr,
                "'cd %s && exec bash -l'" % (os.path.join(config.PROJECT_PATH, "data/local/{exp_prefix}/{job}".format(
                    exp_prefix=exp_prefix,
                    job=job
                )))
            ])
            print(command)
            os.system(command)
            return
    print("Not found!")


@cli.command()
@click.argument('job')
def sim_policy(job):
    for instance in get_all_instances():
        name = get_name_tag(instance)
        if name == job:
            ip_addr = instance['PublicIpAddress']
            exp_prefix = get_exp_prefix_tag(instance)

            copy_command = [
                "ssh",
                "-oStrictHostKeyChecking=no",
                "-oConnectTimeout=10",
                "ubuntu@{ip}".format(ip=ip_addr),
                "cp {project_path}/data/local/{exp_prefix}/{job}/params.pkl /tmp/params.pkl".format(
                    project_path=config.PROJECT_PATH,
                    exp_prefix=exp_prefix,
                    job=job

                )
            ]
            print(" ".join(copy_command))
            subprocess.check_call(copy_command)

            command = [
                "scp",
                "-oStrictHostKeyChecking=no",
                "-oConnectTimeout=10",
                "ubuntu@{ip}:/tmp/params.pkl".format(
                    ip=ip_addr,
                    project_path=config.PROJECT_PATH,
                    exp_prefix=exp_prefix,
                    job=job
                ),
                "/tmp/params.pkl"
            ]
            print(" ".join(command))
            subprocess.check_call(command)
            if "conopt" in job or "analogy" in job:
                script = "sandbox/rocky/analogy/scripts/sim_policy.py"
            else:
                script = "scripts/sim_policy.py"
            subprocess.check_call(["python", os.path.join(config.PROJECT_PATH, script), "/tmp/params.pkl"])
            return
    print("Not found!")


@cli.command()
@click.argument('pattern')
def kill_f(pattern):
    to_kill = []
    to_kill_ids = {}
    for instance in get_all_instances():
        name = get_name_tag(instance)
        if name is not None and pattern in name:
            region = instance['Region']
            if region not in to_kill_ids:
                to_kill_ids[region] = []
            to_kill_ids[region].append(instance['InstanceId'])
            to_kill.append(name)

    print("This will kill the following jobs:")
    print(", ".join(sorted(to_kill)))
    if query_yes_no(question="Proceed?", default="no"):
        for client in get_clients():
            print("Terminating instances in region", client.region)
            ids = to_kill_ids.get(client.region, [])
            if len(ids) > 0:
                client.terminate_instances(
                    InstanceIds=to_kill_ids.get(client.region, [])
                )

@cli.command()
@click.argument('job')
def kill(job):
    to_kill = []
    to_kill_ids = {}
    for instance in get_all_instances():
        name = get_name_tag(instance)
        if name == job:
            region = instance['Region']
            if region not in to_kill_ids:
                to_kill_ids[region] = []
            to_kill_ids[region].append(instance['InstanceId'])
            to_kill.append(name)
            break

    print("This will kill the following jobs:")
    print(", ".join(sorted(to_kill)))
    if query_yes_no(question="Proceed?", default="no"):
        for client in get_clients():
            print("Terminating instances in region", client.region)
            ids = to_kill_ids.get(client.region, [])
            if len(ids) > 0:
                client.terminate_instances(
                    InstanceIds=to_kill_ids.get(client.region, [])
                )


@cli.command()
def check_price():
    import ipdb;
    ipdb.set_trace()


@cli.command()
def stats():
    instances = get_all_instances()

    # for instance in get_all_instances():
    #     name = get_name_tag(instance)
    #     if name is not None and pattern in name:
    #         region = instance['Region']
    #         if region not in to_kill_ids:
    #             to_kill_ids[region] = []
    #         to_kill_ids[region].append(instance['InstanceId'])
    #         to_kill.append(name)
    #
    # print("This will kill the following jobs:")
    # print(", ".join(sorted(to_kill)))
    # if query_yes_no(question="Proceed?", default="no"):
    #     for client in get_clients():
    #         print("Terminating instances in region", client.region)
    #         ids = to_kill_ids.get(client.region, [])
    #         if len(ids) > 0:
    #             client.terminate_instances(
    #                 InstanceIds=to_kill_ids.get(client.region, [])
    #             )


if __name__ == '__main__':
    cli()
