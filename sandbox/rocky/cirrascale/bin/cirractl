#!/Users/dementrock/anaconda/envs/rllab3/bin/python
import logging
import re
import sys

import click

DEBUG_LOGGING_MAP = {
    0: logging.CRITICAL,
    1: logging.WARNING,
    2: logging.INFO,
    3: logging.DEBUG
}


@click.group()
@click.option('--verbose', '-v',
              help="Sets the debug noise level, specify multiple times "
                   "for more verbosity.",
              type=click.IntRange(0, 3, clamp=True),
              count=True)
@click.pass_context
def cli(ctx, verbose):
    logger_handler = logging.StreamHandler(sys.stderr)
    logger_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
    logging.getLogger().addHandler(logger_handler)
    logging.getLogger().setLevel(DEBUG_LOGGING_MAP.get(verbose, logging.DEBUG))


@cli.command()
def stats():
    from sandbox.rocky.cirrascale import client
    from sandbox.rocky.cirrascale.launch_job import get_directory
    dir = get_directory()
    gpus = client.get_gpu_status()
    n_pascals = 0
    n_free_pascals = 0
    n_maxwells = 0
    n_free_maxwells = 0
    for host, gpus in gpus.items():
        if host in dir and dir[host] == "pascal":
            n_pascals += len(gpus)
            n_free_pascals += len([g for g in gpus if g.available])
        elif host in dir and dir[host] == "maxwell":
            n_maxwells += len(gpus)
            n_free_maxwells += len([g for g in gpus if g.available])
        else:
            pass
    print("#Pascal GPU: %d" % n_pascals)
    print("#Free Pascal GPU: %d" % n_free_pascals)
    print("#Maxwell GPU: %d" % n_maxwells)
    print("#Free Maxwell GPU: %d" % n_free_maxwells)


@cli.command()
@click.option('--all', '-a', default=False, help='show status of each job')
def jobs(all):
    import redis
    import json
    from sandbox.rocky.cirrascale import cirra_config
    redis_cli = redis.StrictRedis(host=cirra_config.REDIS_HOST)
    jobs = redis_cli.keys("job/*")
    if len(jobs) == 0:
        print("No jobs currently running")
    else:
        job_dicts = [json.loads(x.decode()) for x in redis_cli.mget(jobs)]
        job_dicts = sorted(job_dicts, key=lambda x: (x["created_at"], x["job_id"]))

        for job in job_dicts:
            print("%s running on %s:%s" % (job["job_id"], job["gpu_host"], job["gpu_index"]))


@cli.command()
@click.argument('job_id')
def kill(job_id):
    import redis
    import json
    import subprocess
    import os
    from sandbox.rocky.cirrascale import cirra_config
    redis_cli = redis.StrictRedis(host=cirra_config.REDIS_HOST)

    content = redis_cli.get("job/%s" % job_id)
    job = json.loads(content.decode())
    print(job)

    assert len(job['job_id']) > 5

    command = [
        "ssh",
        "rocky@%s" % job['gpu_host'],
        'sudo pkill -f -9 %s' % job['job_id']
    ]

    print(command)

    try:
        print(subprocess.check_output(command))
    except Exception as e:
        print(e)

    redis_cli.delete("job/%s" % job_id)
    print("Job %s deleted" % job_id)


@cli.command()
def kill_all():
    import redis
    import json
    import subprocess
    import os
    from sandbox.rocky.cirrascale import cirra_config
    redis_cli = redis.StrictRedis(host=cirra_config.REDIS_HOST)

    jobs = redis_cli.keys("job/*")  # % job_id)
    for job_id in jobs:
        content = redis_cli.get(job_id)
        job = json.loads(content.decode())
        print(job)

        assert len(job['job_id']) > 5

        command = [
            "ssh",
            "rocky@%s" % job['gpu_host'],
            "sudo kill -9 $(ps aux | grep %s | awk '{print $2}')" % job['job_id'],
        ]

        print(command)

        try:
            print(subprocess.check_output(command))
        except Exception as e:
            print(e)

        redis_cli.delete(job_id)
        print("Job %s deleted" % job_id)


@cli.command()
@click.argument('job_id')
@click.option('--lines', '-n', default=30, help='output the last K lines of the log')
def status(job_id, lines):
    import subprocess
    import redis
    import json
    from sandbox.rocky.cirrascale import cirra_config
    redis_cli = redis.StrictRedis(host=cirra_config.REDIS_HOST)
    content = redis_cli.get("job/%s" % job_id)
    if content is None:
        print("No job with name %s exists" % job_id)
    else:
        job = json.loads(content.decode())
        print(job)

        command = [
            "ssh",
            "rocky@%s" % job['gpu_host'],
            'tail -n %d /local_home/rocky/rllab-workdir/%s/user_data.log' % (lines, job_id)
        ]

        print(command)

        try:
            print(subprocess.check_output(command).decode())
        except Exception as e:
            print(e)


if __name__ == '__main__':
    cli()
